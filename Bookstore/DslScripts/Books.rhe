Module Bookstore
{
   MonitoredRecord Book
   {
      Reference AssignedTo Bookstore.Employee;

      RowPermissions
      {
        AllowRead EveryoneCanRead 'context =>
            {
                return book => book.AssignedTo.ID != null;
            }';

        // Better:
        AllowRead EveryoneCanRead2 'context =>
            {
                return book => true;
            }';

        // Shorter:
        AllowRead EveryoneCanRead3 'context => book => true';

        //====================

        Allow OwnerCanWrite 'context =>
            {
                Guid employeeId = context.Repository
                    .Bookstore.Employee.Query()
                    .Where(e => e.UserName == context.UserInfo.UserName)
                    .Select( e => e.ID)
                    .SingleOrDefault();
                return book => book.AssignedTo.ID == employeeId;
            }';

        // Better:
        AllowWrite OwnerCanWrite2 'context =>
            {
                return book => book.AssignedTo.UserName == context.UserInfo.UserName;
            }';
      }

      ShortString Code { AutoCode; }
      ShortString Title;
      Integer NumberOfPages;
      Reference Author Bookstore.Person;

      ItemFilter LongBooks 'item => item.NumberOfPages >= 500';

      ItemFilter CommonMisspelling 'book => book.Title.Contains("curiousity")';
      InvalidData CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

      ItemFilter ForeignAuthorXWithComments 'item =>
            item.Author.Name.StartsWith("X")
            && item.Extension_ForeignBook.ID != null
            && _domRepository.Bookstore.Comment.Subquery.Where(c => c.BookID == item.ID).Count() >= 3';

      ComposableFilterBy LongBooks2 '(query, repository, parameter) =>
            {
                return query.Where(item => item.NumberOfPages >= 500);
            }';

       ComposableFilterBy LongBooks3 '(query, repository, parameter) =>
            {
                var filtered = query.Where(item => item.NumberOfPages >= parameter.MinimumPages);
                if (parameter.ForeignBooksOnly == true)
                    filtered = filtered.Where(item => item.Extension_ForeignBook.ID != null);
                return filtered;
            }';

       FilterBy ComplexSearch '(repository, parameter) =>
        {
            var query = repository.Bookstore.Book.Query(item => item.NumberOfPages >= parameter.MinimumPages);
            if (parameter.ForeignBooksOnly == true)
                query = query.Where(item => item.Extension_ForeignBook.ID != null);
            Book[] books = query.ToSimple().ToArray();

            if (parameter.MaskTitles == true)
                foreach (var book in books.Where(b => !string.IsNullOrEmpty(b.Title)))
                    book.Title = book.Title.First() + "***" + book.Title.Last();

            return books;
        }';
      
      Logging;
   }

    Parameter LongBooks2
    {
    }

    Parameter LongBooks3
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
    }

    Parameter ComplexSearch
    {
        Integer MinimumPages;
        Bool ForeignBooksOnly;
        Bool MaskTitles;
    }

    Entity Person
    {
      ShortString Name;
    }

    Entity Comment
    {
      Reference Book { Detail; }
      LongString Text;

      RowPermissions
      {
        AllowRead EveryoneCanRead 'context =>
            {
                return comment => comment.Book.AssignedTo.ID != null;
            }';

        Allow OwnerCanWrite 'context =>
            {
                Guid employeeId = context.Repository
                    .Bookstore.Employee.Query()
                    .Where(e => e.UserName == context.UserInfo.UserName)
                    .Select(e => e.ID)
                    .SingleOrDefault();

                return comment => comment.Book.AssignedTo.ID == employeeId;
            }';

        // Better:
        InheritFrom Bookstore.Comment.Book;
      }
    }

    Entity ChildrensBook
    {
        Extends Bookstore.Book;

        Integer AgeFrom;
        Integer AgeTo;
        IntegerRange AgeFrom AgeTo; // A simple validation.
    }

    Entity ForeignBook
    {
        Extends Bookstore.Book;

        ShortString OriginalLanguage;
        Reference Translator Bookstore.Person;
    }

    Entity Topic
    {
        ShortString Name { Unique; Required; }
    }

    Entity BookTopic
    {
        Reference Book { Detail; }
        Reference Topic { Required; }

        UniqueMultiple 'Book Topic';
    }

    Browse BookGrid Bookstore.Book
    {
        Take Code;
        Take Title;
        Take 'Author.Name';
        Take TranslatorName 'Extension_ForeignBook.Translator.Name';
    }

    SqlQueryable BookInfo
        "
            SELECT
                b.ID,
                NumberOfComments = COUNT(c.ID)
            FROM
                Bookstore.Book b
                LEFT JOIN Bookstore.Comment c ON c.BookID = b.ID
            GROUP BY
                b.ID
        "
    {
        Extends Bookstore.Book;
        Integer NumberOfComments;

        AutodetectSqlDependencies;
    }

        //SqlQueryable BookTopicInfo
        //"
        //    SELECT
       //         NumberOfTopics = COUNT(b.TopicId)
        //    FROM
         //   Bookstore.BookTopic b
          //  GROUP BY
           //     b.BookId
        //"
    //{
      //  Extends Bookstore.Book;
       // Extends Bookstore.Topic;
       // Integer NumberOfTopics;

//        AutodetectSqlDependencies;
  //  }

    Browse PersonGrid Bookstore.Person
    {
        Take Name;
    }

    Hardcoded Genre
    {
        ShortString Label; // Short text displayed to user.
        LongString Description;
        Bool IsFiction;

        Entry ScienceFiction
        {
            Value Label 'Science fiction';
            Value Description 'A speculative fiction with imagined elements that are inspired by natural sciences or social sciences.';
            Value IsFiction 1;
        }

        Entry Biography
        {
            Value Label 'Biography';
            Value Description 'A written narrative of a person''s life.';
            Value IsFiction 0;
        }
    }

    Action InsertManyBooks
    '(parameter, repository, userInfo) =>
    {
        for (int i = 0; i < parameter.NumberOfBooks; i++)
        {
            string newTitle = parameter.TitlePrefix + " - " + (i + 1);
            var newBook = new Bookstore.Book { Code = "+++", Title = newTitle };
            repository.Bookstore.Book.Insert(newBook);
        }
    }'
{
    Integer NumberOfBooks;
    ShortString TitlePrefix;
}
}

//FLAT

//Module Bookstore;
//Entity Bookstore.Book;
//ShortString Bookstore.Book.Code;
//AutoCode Bookstore.Book.Code;
//Required Bookstore.Book.Code;
//Unique Bookstore.Book.Code;
//ShortString Bookstore.Book.Title;
//Required Bookstore.Book.Title;
//Integer Bookstore.Book.NumberOfPages;
//ShortString Bookstore.Book.SomeProperty;
//ItemFilter Bookstore.Book.CommonMisspelling 'book => book.Title.Contains("curiousity")';
//InvalidData Bookstore.Book.CommonMisspelling 'It is not allowed to enter misspelled word "curiousity".';

//Logging Bookstore.Book;
//Reference Bookstore.Book Author Bookstore.Person;